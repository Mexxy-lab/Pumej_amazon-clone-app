// pipeline {
//     agent any

//      options {
//         timeout(time: 10, unit: 'MINUTES')
//      }
//     environment {
//     ACR_NAME = "pumejrepo"
//     registyUrl = "598189530267.dkr.ecr.ap-south-1.amazonaws.com"
//     //IMAGE_NAME = "pumej_amazon-webapp"
//     IMAGE_TAG = "v1.0"
//     }
//     stages {
//         stage('SCM Checkout') {
//             steps{
//            git branch: 'main', url: 'https://github.com/Mexxy-lab/Pumej_amazon-clone-app.git'
//             }
//         }
//        // Building Docker Image
//        stage ('Build Docker image') {
//         steps {
//                 script {
//                     //dockerImage = docker.build registryUrl
//                  def dockerImage = docker.build("${registyUrl}/${ACR_NAME}:${IMAGE_TAG}", '.')
//                 }
//             }
//        }
//     // Uploading Docker images into Amazon CR
//         stage('Upload Image to ACR') {
//          steps{
//              script {
//                  docker.withRegistry( "http://${registyUrl}/${ACR_NAME}", 'ecr:ap-south-1:pumejawsacr' ) {
//                // dockerImage.push()
//               sh "docker push ${registyUrl}/${ACR_NAME}:${IMAGE_TAG}"
//                   }
//               }
//          }
//       }
//     }
// }


pipeline {
    agent any

    options {
        timeout(time: 10, unit: 'MINUTES')
    }

    environment {
        ECR_NAME = "pumejrepo"
        registyUrl = "598189530267.dkr.ecr.ap-south-1.amazonaws.com"
        IMAGE_TAG = "v1.0"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Mexxy-lab/Pumej_amazon-clone-app.git'
            }
        }

        stage('Build Docker image') {
            steps {
                script {
                    docker.build("${registyUrl}/${ECR_NAME}:${IMAGE_TAG}", '.')
                }
            }
        }

        stage('Upload Image to ACR') {
            steps {
                script {
                    docker.withRegistry("http://${registyUrl}/${ECR_NAME}", 'ecr:ap-south-1:pumejawsecr') {
                        sh "docker push ${registyUrl}/${ECR_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Trigger ManifestUpdate') {
            steps {
                build job: 'argocd-manifest-amazon', parameters: [
                    string(name: 'DOCKERTAG', value: env.BUILD_NUMBER)
                ]
            }
        }
    }

    post {
        always {
            slackSend color: "good", message: "Build Deployed Successfully, Downstream Job Triggered"
        }
    }
}
