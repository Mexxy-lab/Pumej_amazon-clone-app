// pipeline {
//     agent any

//     options {
//         timeout(time: 10, unit: 'MINUTES')
//     }

//     environment {
//         ECR_NAME = "pumejrepo"
//         registyUrl = "598189530267.dkr.ecr.ap-south-1.amazonaws.com"
//         IMAGE_TAG = "v1.0"
//     }

//     stages {
//         stage('SCM Checkout') {
//             steps {
//                 git branch: 'main', url: 'https://github.com/Mexxy-lab/Pumej_amazon-clone-app.git'
//             }
//         }

//         stage('Build Docker image') {
//             steps {
//                 script {
//                     sh """
//                         docker build --network=host -t ${registyUrl}/${ECR_NAME}:${IMAGE_TAG} .
//                     """
//                 }

//             }
//         }
//         stage('Trivy Scan (Aqua)') {
//             steps {
//                 script {
//                     sh """
//                     echo "üîç Running Trivy vulnerability scan..."

//                     trivy image \
//                       --scanners vuln \
//                       --severity HIGH,CRITICAL \
//                       --timeout 10m \
//                       ${registyUrl}/${ECR_NAME}:${IMAGE_TAG}
//                     """
//                 }
//             }
//         }
//         stage('Upload Image to Amazon Container Repository') {
//             steps {
//                 script {
//                     docker.withRegistry("https://${registyUrl}", 'ecr:ap-south-1:pumejawsecr') {
//                         sh "docker push --quiet ${registyUrl}/${ECR_NAME}:${IMAGE_TAG}"
//                     }
//                 }
//             }
//         }

//         stage('Trigger ManifestUpdate') {
//             steps {
//                 build job: 'argocd-manifest-amazon', parameters: [
//                     string(name: 'DOCKERTAG', value: env.BUILD_NUMBER)
//                 ]
//             }
//         }
//     }

//     post {
//         always {
//             script {
//                 sh 'echo "‚úÖ Build Deployed Successfully, downstream job triggered!"'
//             }
//         }
//     }
// }

pipeline {
    agent any

    options {
        timeout(time: 15, unit: 'MINUTES') // Slightly increased for safety
    }

    environment {
        AWS_REGION = "ap-south-1"
        AWS_CREDENTIALS = credentials('aws-ecr-credentials')
        ECR_NAME = "pumejrepo"
        registryUrl = "598189530267.dkr.ecr.ap-south-1.amazonaws.com"
        IMAGE_TAG = "v1.0"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Mexxy-lab/Pumej_amazon-clone-app.git'
            }
        }

        stage('Docker Build') {
            steps {
                sh """
                    docker build --network=host -t ${registryUrl}/${ECR_NAME}:${IMAGE_TAG} .
                """
            }
        }

        stage('Login to ECR') {
            steps {
                sh """
                    echo "üîë Logging into Amazon ECR..."
                    aws configure set aws_access_key_id $AWS_CREDENTIALS_USR
                    aws configure set aws_secret_access_key $AWS_CREDENTIALS_PSW
                    aws configure set region ${AWS_REGION}
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${registryUrl}
                """
            }
        }

        stage('Trivy Scan (Aqua)') {
            steps {
                sh """
                    echo "üîç Running Trivy vulnerability scan..."
                    trivy image \
                      --scanners vuln \
                      --severity HIGH,CRITICAL \
                      --timeout 10m \
                      ${registryUrl}/${ECR_NAME}:${IMAGE_TAG}
                """
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                sh """
                    echo "üöÄ Pushing Docker image to Amazon ECR..."
                    docker push ${registryUrl}/${ECR_NAME}:${IMAGE_TAG}
                """
            }
        }

        stage('Trigger ManifestUpdate') {
            steps {
                build job: 'argocd-manifest-amazon', parameters: [
                    string(name: 'DOCKERTAG', value: env.BUILD_NUMBER)
                ]
            }
        }
    }

    post {
        always {
            echo "‚úÖ Build Deployed Successfully, downstream job triggered!"
        }
    }
}
